{"version":3,"file":"static/js/578.7fbcf4cc.chunk.js","mappings":"0MACA,EAAuB,wBAAvB,EAAuD,yBAAvD,EAAwF,yBAAxF,EAA0H,0B,gDCMtHA,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,MAAOF,EAAAA,KAAaE,QAAQC,WAC5BC,SAAUJ,EAAAA,KAAaK,IAAI,GAAGC,IAAI,IAAIH,aAGlCI,EAAe,CACnBL,MAAO,GACPE,SAAU,IAGCI,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAKjB,OACE,SAAC,KAAD,CACEC,cAAeJ,EACfK,iBAAkBb,EAClBc,SARiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BN,GAASO,EAAAA,EAAAA,IAAMF,IACfC,KAGA,UAKE,UAAC,KAAD,CAAME,aAAa,MAAMC,UAAWC,EAApC,WACE,mBAAOC,QAAQ,QAAQF,UAAWC,EAAlC,mBAEE,SAAC,KAAD,CACEE,KAAK,QACLC,KAAK,QACLC,YAAY,mBACZL,UAAWC,QAGf,SAAC,KAAD,CACEE,KAAK,QACLG,OAAQ,SAAAC,GACNC,EAAAA,GAAAA,MAAA,UAAeD,QAGnB,mBAAOL,QAAQ,WAAWF,UAAWC,EAArC,sBAEE,SAAC,KAAD,CACEE,KAAK,WACLC,KAAK,OACLC,YAAY,sBACZL,UAAWC,KAEb,SAAC,KAAD,CACEE,KAAK,WACLG,OAAQ,SAAAC,GACNC,EAAAA,GAAAA,MAAA,UAAeD,WAIrB,mBAAQH,KAAK,SAASJ,UAAWC,EAAjC,0BC1DKQ,EAAY,WACvB,OACE,2BACE,SAACnB,EAAD","sources":["webpack://goit-react-hw-08-phonebook/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","pages/loginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"label\":\"LoginForm_label__F7sLE\",\"input\":\"LoginForm_input__aQRtt\",\"button\":\"LoginForm_button__LodJg\"};","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport css from './LoginForm.module.css';\nimport * as yup from 'yup';\nimport { toast } from 'react-toastify';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/Auth/auth-operations';\n\nlet schema = yup.object().shape({\n  email: yup.string().email().required(),\n  password: yup.string().min(6).max(32).required(),\n});\n\nconst initialValue = {\n  email: '',\n  password: '',\n};\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(logIn(values));\n    resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValue}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form autoComplete=\"off\" className={css.form}>\n        <label htmlFor=\"email\" className={css.label}>\n          Email\n          <Field\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"Enter your email\"\n            className={css.input}\n          />\n        </label>\n        <ErrorMessage\n          name=\"email\"\n          render={msg => {\n            toast.error(`${msg}`);\n          }}\n        />\n        <label htmlFor=\"password\" className={css.label}>\n          Password\n          <Field\n            name=\"password\"\n            type=\"text\"\n            placeholder=\"Enter your password\"\n            className={css.input}\n          />\n          <ErrorMessage\n            name=\"password\"\n            render={msg => {\n              toast.error(`${msg}`);\n            }}\n          />\n        </label>\n        <button type=\"submit\" className={css.button}>\n          Log In\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport const LoginPage = () => {\n  return (\n    <main>\n      <LoginForm />\n    </main>\n  );\n};\n"],"names":["schema","yup","shape","email","required","password","min","max","initialValue","LoginForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","logIn","autoComplete","className","css","htmlFor","name","type","placeholder","render","msg","toast","LoginPage"],"sourceRoot":""}